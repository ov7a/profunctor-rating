-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module ProfunctorIo.Enum.Jobs_select_column exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| select columns of table "jobs"

  - About\_brief - column name
  - About\_long - column name
  - Approved - column name
  - Cash\_max - column name
  - Cash\_min - column name
  - Company\_industry - column name
  - Company\_name - column name
  - Contact\_email - column name
  - Contact\_telegram - column name
  - Created\_at - column name
  - Hashtags - column name
  - Id - column name
  - Legacy - column name
  - Level - column name
  - Location\_city - column name
  - Location\_country - column name
  - Location\_office - column name
  - Perks - column name
  - Premium - column name
  - Remote - column name
  - Scope - column name
  - Stack - column name
  - Updated\_at - column name

-}
type Jobs_select_column
    = About_brief
    | About_long
    | Approved
    | Cash_max
    | Cash_min
    | Company_industry
    | Company_name
    | Contact_email
    | Contact_telegram
    | Created_at
    | Hashtags
    | Id
    | Legacy
    | Level
    | Location_city
    | Location_country
    | Location_office
    | Perks
    | Premium
    | Remote
    | Scope
    | Stack
    | Updated_at


list : List Jobs_select_column
list =
    [ About_brief, About_long, Approved, Cash_max, Cash_min, Company_industry, Company_name, Contact_email, Contact_telegram, Created_at, Hashtags, Id, Legacy, Level, Location_city, Location_country, Location_office, Perks, Premium, Remote, Scope, Stack, Updated_at ]


decoder : Decoder Jobs_select_column
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "about_brief" ->
                        Decode.succeed About_brief

                    "about_long" ->
                        Decode.succeed About_long

                    "approved" ->
                        Decode.succeed Approved

                    "cash_max" ->
                        Decode.succeed Cash_max

                    "cash_min" ->
                        Decode.succeed Cash_min

                    "company_industry" ->
                        Decode.succeed Company_industry

                    "company_name" ->
                        Decode.succeed Company_name

                    "contact_email" ->
                        Decode.succeed Contact_email

                    "contact_telegram" ->
                        Decode.succeed Contact_telegram

                    "created_at" ->
                        Decode.succeed Created_at

                    "hashtags" ->
                        Decode.succeed Hashtags

                    "id" ->
                        Decode.succeed Id

                    "legacy" ->
                        Decode.succeed Legacy

                    "level" ->
                        Decode.succeed Level

                    "location_city" ->
                        Decode.succeed Location_city

                    "location_country" ->
                        Decode.succeed Location_country

                    "location_office" ->
                        Decode.succeed Location_office

                    "perks" ->
                        Decode.succeed Perks

                    "premium" ->
                        Decode.succeed Premium

                    "remote" ->
                        Decode.succeed Remote

                    "scope" ->
                        Decode.succeed Scope

                    "stack" ->
                        Decode.succeed Stack

                    "updated_at" ->
                        Decode.succeed Updated_at

                    _ ->
                        Decode.fail ("Invalid Jobs_select_column type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Jobs_select_column -> String
toString enum____ =
    case enum____ of
        About_brief ->
            "about_brief"

        About_long ->
            "about_long"

        Approved ->
            "approved"

        Cash_max ->
            "cash_max"

        Cash_min ->
            "cash_min"

        Company_industry ->
            "company_industry"

        Company_name ->
            "company_name"

        Contact_email ->
            "contact_email"

        Contact_telegram ->
            "contact_telegram"

        Created_at ->
            "created_at"

        Hashtags ->
            "hashtags"

        Id ->
            "id"

        Legacy ->
            "legacy"

        Level ->
            "level"

        Location_city ->
            "location_city"

        Location_country ->
            "location_country"

        Location_office ->
            "location_office"

        Perks ->
            "perks"

        Premium ->
            "premium"

        Remote ->
            "remote"

        Scope ->
            "scope"

        Stack ->
            "stack"

        Updated_at ->
            "updated_at"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Jobs_select_column
fromString enumString____ =
    case enumString____ of
        "about_brief" ->
            Just About_brief

        "about_long" ->
            Just About_long

        "approved" ->
            Just Approved

        "cash_max" ->
            Just Cash_max

        "cash_min" ->
            Just Cash_min

        "company_industry" ->
            Just Company_industry

        "company_name" ->
            Just Company_name

        "contact_email" ->
            Just Contact_email

        "contact_telegram" ->
            Just Contact_telegram

        "created_at" ->
            Just Created_at

        "hashtags" ->
            Just Hashtags

        "id" ->
            Just Id

        "legacy" ->
            Just Legacy

        "level" ->
            Just Level

        "location_city" ->
            Just Location_city

        "location_country" ->
            Just Location_country

        "location_office" ->
            Just Location_office

        "perks" ->
            Just Perks

        "premium" ->
            Just Premium

        "remote" ->
            Just Remote

        "scope" ->
            Just Scope

        "stack" ->
            Just Stack

        "updated_at" ->
            Just Updated_at

        _ ->
            Nothing
