-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module ProfunctorIo.InputObject exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import ProfunctorIo.Enum.Order_by
import ProfunctorIo.Interface
import ProfunctorIo.Object
import ProfunctorIo.Scalar
import ProfunctorIo.ScalarCodecs
import ProfunctorIo.Union


buildBigint_comparison_exp :
    (Bigint_comparison_expOptionalFields -> Bigint_comparison_expOptionalFields)
    -> Bigint_comparison_exp
buildBigint_comparison_exp fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { eq_ = Absent, gt_ = Absent, gte_ = Absent, in_ = Absent, is_null_ = Absent, lt_ = Absent, lte_ = Absent, neq_ = Absent, nin_ = Absent }
    in
    { eq_ = optionals____.eq_, gt_ = optionals____.gt_, gte_ = optionals____.gte_, in_ = optionals____.in_, is_null_ = optionals____.is_null_, lt_ = optionals____.lt_, lte_ = optionals____.lte_, neq_ = optionals____.neq_, nin_ = optionals____.nin_ }


type alias Bigint_comparison_expOptionalFields =
    { eq_ : OptionalArgument ProfunctorIo.ScalarCodecs.Bigint
    , gt_ : OptionalArgument ProfunctorIo.ScalarCodecs.Bigint
    , gte_ : OptionalArgument ProfunctorIo.ScalarCodecs.Bigint
    , in_ : OptionalArgument (List ProfunctorIo.ScalarCodecs.Bigint)
    , is_null_ : OptionalArgument Bool
    , lt_ : OptionalArgument ProfunctorIo.ScalarCodecs.Bigint
    , lte_ : OptionalArgument ProfunctorIo.ScalarCodecs.Bigint
    , neq_ : OptionalArgument ProfunctorIo.ScalarCodecs.Bigint
    , nin_ : OptionalArgument (List ProfunctorIo.ScalarCodecs.Bigint)
    }


{-| Type for the Bigint\_comparison\_exp input object.
-}
type alias Bigint_comparison_exp =
    { eq_ : OptionalArgument ProfunctorIo.ScalarCodecs.Bigint
    , gt_ : OptionalArgument ProfunctorIo.ScalarCodecs.Bigint
    , gte_ : OptionalArgument ProfunctorIo.ScalarCodecs.Bigint
    , in_ : OptionalArgument (List ProfunctorIo.ScalarCodecs.Bigint)
    , is_null_ : OptionalArgument Bool
    , lt_ : OptionalArgument ProfunctorIo.ScalarCodecs.Bigint
    , lte_ : OptionalArgument ProfunctorIo.ScalarCodecs.Bigint
    , neq_ : OptionalArgument ProfunctorIo.ScalarCodecs.Bigint
    , nin_ : OptionalArgument (List ProfunctorIo.ScalarCodecs.Bigint)
    }


{-| Encode a Bigint\_comparison\_exp into a value that can be used as an argument.
-}
encodeBigint_comparison_exp : Bigint_comparison_exp -> Value
encodeBigint_comparison_exp input____ =
    Encode.maybeObject
        [ ( "_eq", (ProfunctorIo.ScalarCodecs.codecs |> ProfunctorIo.Scalar.unwrapEncoder .codecBigint) |> Encode.optional input____.eq_ ), ( "_gt", (ProfunctorIo.ScalarCodecs.codecs |> ProfunctorIo.Scalar.unwrapEncoder .codecBigint) |> Encode.optional input____.gt_ ), ( "_gte", (ProfunctorIo.ScalarCodecs.codecs |> ProfunctorIo.Scalar.unwrapEncoder .codecBigint) |> Encode.optional input____.gte_ ), ( "_in", ((ProfunctorIo.ScalarCodecs.codecs |> ProfunctorIo.Scalar.unwrapEncoder .codecBigint) |> Encode.list) |> Encode.optional input____.in_ ), ( "_is_null", Encode.bool |> Encode.optional input____.is_null_ ), ( "_lt", (ProfunctorIo.ScalarCodecs.codecs |> ProfunctorIo.Scalar.unwrapEncoder .codecBigint) |> Encode.optional input____.lt_ ), ( "_lte", (ProfunctorIo.ScalarCodecs.codecs |> ProfunctorIo.Scalar.unwrapEncoder .codecBigint) |> Encode.optional input____.lte_ ), ( "_neq", (ProfunctorIo.ScalarCodecs.codecs |> ProfunctorIo.Scalar.unwrapEncoder .codecBigint) |> Encode.optional input____.neq_ ), ( "_nin", ((ProfunctorIo.ScalarCodecs.codecs |> ProfunctorIo.Scalar.unwrapEncoder .codecBigint) |> Encode.list) |> Encode.optional input____.nin_ ) ]


buildBoolean_comparison_exp :
    (Boolean_comparison_expOptionalFields -> Boolean_comparison_expOptionalFields)
    -> Boolean_comparison_exp
buildBoolean_comparison_exp fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { eq_ = Absent, gt_ = Absent, gte_ = Absent, in_ = Absent, is_null_ = Absent, lt_ = Absent, lte_ = Absent, neq_ = Absent, nin_ = Absent }
    in
    { eq_ = optionals____.eq_, gt_ = optionals____.gt_, gte_ = optionals____.gte_, in_ = optionals____.in_, is_null_ = optionals____.is_null_, lt_ = optionals____.lt_, lte_ = optionals____.lte_, neq_ = optionals____.neq_, nin_ = optionals____.nin_ }


type alias Boolean_comparison_expOptionalFields =
    { eq_ : OptionalArgument Bool
    , gt_ : OptionalArgument Bool
    , gte_ : OptionalArgument Bool
    , in_ : OptionalArgument (List Bool)
    , is_null_ : OptionalArgument Bool
    , lt_ : OptionalArgument Bool
    , lte_ : OptionalArgument Bool
    , neq_ : OptionalArgument Bool
    , nin_ : OptionalArgument (List Bool)
    }


{-| Type for the Boolean\_comparison\_exp input object.
-}
type alias Boolean_comparison_exp =
    { eq_ : OptionalArgument Bool
    , gt_ : OptionalArgument Bool
    , gte_ : OptionalArgument Bool
    , in_ : OptionalArgument (List Bool)
    , is_null_ : OptionalArgument Bool
    , lt_ : OptionalArgument Bool
    , lte_ : OptionalArgument Bool
    , neq_ : OptionalArgument Bool
    , nin_ : OptionalArgument (List Bool)
    }


{-| Encode a Boolean\_comparison\_exp into a value that can be used as an argument.
-}
encodeBoolean_comparison_exp : Boolean_comparison_exp -> Value
encodeBoolean_comparison_exp input____ =
    Encode.maybeObject
        [ ( "_eq", Encode.bool |> Encode.optional input____.eq_ ), ( "_gt", Encode.bool |> Encode.optional input____.gt_ ), ( "_gte", Encode.bool |> Encode.optional input____.gte_ ), ( "_in", (Encode.bool |> Encode.list) |> Encode.optional input____.in_ ), ( "_is_null", Encode.bool |> Encode.optional input____.is_null_ ), ( "_lt", Encode.bool |> Encode.optional input____.lt_ ), ( "_lte", Encode.bool |> Encode.optional input____.lte_ ), ( "_neq", Encode.bool |> Encode.optional input____.neq_ ), ( "_nin", (Encode.bool |> Encode.list) |> Encode.optional input____.nin_ ) ]


buildDownvotes_by_submitters_bool_exp :
    (Downvotes_by_submitters_bool_expOptionalFields -> Downvotes_by_submitters_bool_expOptionalFields)
    -> Downvotes_by_submitters_bool_exp
buildDownvotes_by_submitters_bool_exp fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { and_ = Absent, not_ = Absent, or_ = Absent, count = Absent, submitted_by_username = Absent }
    in
    Downvotes_by_submitters_bool_exp { and_ = optionals____.and_, not_ = optionals____.not_, or_ = optionals____.or_, count = optionals____.count, submitted_by_username = optionals____.submitted_by_username }


type alias Downvotes_by_submitters_bool_expOptionalFields =
    { and_ : OptionalArgument (List (Maybe Downvotes_by_submitters_bool_exp))
    , not_ : OptionalArgument Downvotes_by_submitters_bool_exp
    , or_ : OptionalArgument (List (Maybe Downvotes_by_submitters_bool_exp))
    , count : OptionalArgument Bigint_comparison_exp
    , submitted_by_username : OptionalArgument String_comparison_exp
    }


{-| Type alias for the `Downvotes_by_submitters_bool_exp` attributes. Note that this type
needs to use the `Downvotes_by_submitters_bool_exp` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias Downvotes_by_submitters_bool_expRaw =
    { and_ : OptionalArgument (List (Maybe Downvotes_by_submitters_bool_exp))
    , not_ : OptionalArgument Downvotes_by_submitters_bool_exp
    , or_ : OptionalArgument (List (Maybe Downvotes_by_submitters_bool_exp))
    , count : OptionalArgument Bigint_comparison_exp
    , submitted_by_username : OptionalArgument String_comparison_exp
    }


{-| Type for the Downvotes\_by\_submitters\_bool\_exp input object.
-}
type Downvotes_by_submitters_bool_exp
    = Downvotes_by_submitters_bool_exp Downvotes_by_submitters_bool_expRaw


{-| Encode a Downvotes\_by\_submitters\_bool\_exp into a value that can be used as an argument.
-}
encodeDownvotes_by_submitters_bool_exp : Downvotes_by_submitters_bool_exp -> Value
encodeDownvotes_by_submitters_bool_exp (Downvotes_by_submitters_bool_exp input____) =
    Encode.maybeObject
        [ ( "_and", (encodeDownvotes_by_submitters_bool_exp |> Encode.maybe |> Encode.list) |> Encode.optional input____.and_ ), ( "_not", encodeDownvotes_by_submitters_bool_exp |> Encode.optional input____.not_ ), ( "_or", (encodeDownvotes_by_submitters_bool_exp |> Encode.maybe |> Encode.list) |> Encode.optional input____.or_ ), ( "count", encodeBigint_comparison_exp |> Encode.optional input____.count ), ( "submitted_by_username", encodeString_comparison_exp |> Encode.optional input____.submitted_by_username ) ]


buildDownvotes_by_submitters_order_by :
    (Downvotes_by_submitters_order_byOptionalFields -> Downvotes_by_submitters_order_byOptionalFields)
    -> Downvotes_by_submitters_order_by
buildDownvotes_by_submitters_order_by fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { count = Absent, submitted_by_username = Absent }
    in
    { count = optionals____.count, submitted_by_username = optionals____.submitted_by_username }


type alias Downvotes_by_submitters_order_byOptionalFields =
    { count : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , submitted_by_username : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    }


{-| Type for the Downvotes\_by\_submitters\_order\_by input object.
-}
type alias Downvotes_by_submitters_order_by =
    { count : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , submitted_by_username : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    }


{-| Encode a Downvotes\_by\_submitters\_order\_by into a value that can be used as an argument.
-}
encodeDownvotes_by_submitters_order_by : Downvotes_by_submitters_order_by -> Value
encodeDownvotes_by_submitters_order_by input____ =
    Encode.maybeObject
        [ ( "count", Encode.enum ProfunctorIo.Enum.Order_by.toString |> Encode.optional input____.count ), ( "submitted_by_username", Encode.enum ProfunctorIo.Enum.Order_by.toString |> Encode.optional input____.submitted_by_username ) ]


buildInt_comparison_exp :
    (Int_comparison_expOptionalFields -> Int_comparison_expOptionalFields)
    -> Int_comparison_exp
buildInt_comparison_exp fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { eq_ = Absent, gt_ = Absent, gte_ = Absent, in_ = Absent, is_null_ = Absent, lt_ = Absent, lte_ = Absent, neq_ = Absent, nin_ = Absent }
    in
    { eq_ = optionals____.eq_, gt_ = optionals____.gt_, gte_ = optionals____.gte_, in_ = optionals____.in_, is_null_ = optionals____.is_null_, lt_ = optionals____.lt_, lte_ = optionals____.lte_, neq_ = optionals____.neq_, nin_ = optionals____.nin_ }


type alias Int_comparison_expOptionalFields =
    { eq_ : OptionalArgument Int
    , gt_ : OptionalArgument Int
    , gte_ : OptionalArgument Int
    , in_ : OptionalArgument (List Int)
    , is_null_ : OptionalArgument Bool
    , lt_ : OptionalArgument Int
    , lte_ : OptionalArgument Int
    , neq_ : OptionalArgument Int
    , nin_ : OptionalArgument (List Int)
    }


{-| Type for the Int\_comparison\_exp input object.
-}
type alias Int_comparison_exp =
    { eq_ : OptionalArgument Int
    , gt_ : OptionalArgument Int
    , gte_ : OptionalArgument Int
    , in_ : OptionalArgument (List Int)
    , is_null_ : OptionalArgument Bool
    , lt_ : OptionalArgument Int
    , lte_ : OptionalArgument Int
    , neq_ : OptionalArgument Int
    , nin_ : OptionalArgument (List Int)
    }


{-| Encode a Int\_comparison\_exp into a value that can be used as an argument.
-}
encodeInt_comparison_exp : Int_comparison_exp -> Value
encodeInt_comparison_exp input____ =
    Encode.maybeObject
        [ ( "_eq", Encode.int |> Encode.optional input____.eq_ ), ( "_gt", Encode.int |> Encode.optional input____.gt_ ), ( "_gte", Encode.int |> Encode.optional input____.gte_ ), ( "_in", (Encode.int |> Encode.list) |> Encode.optional input____.in_ ), ( "_is_null", Encode.bool |> Encode.optional input____.is_null_ ), ( "_lt", Encode.int |> Encode.optional input____.lt_ ), ( "_lte", Encode.int |> Encode.optional input____.lte_ ), ( "_neq", Encode.int |> Encode.optional input____.neq_ ), ( "_nin", (Encode.int |> Encode.list) |> Encode.optional input____.nin_ ) ]


buildJobs_arr_rel_insert_input :
    Jobs_arr_rel_insert_inputRequiredFields
    -> Jobs_arr_rel_insert_input
buildJobs_arr_rel_insert_input required____ =
    { data = required____.data }


type alias Jobs_arr_rel_insert_inputRequiredFields =
    { data : List Jobs_insert_input }


{-| Type for the Jobs\_arr\_rel\_insert\_input input object.
-}
type alias Jobs_arr_rel_insert_input =
    { data : List Jobs_insert_input }


{-| Encode a Jobs\_arr\_rel\_insert\_input into a value that can be used as an argument.
-}
encodeJobs_arr_rel_insert_input : Jobs_arr_rel_insert_input -> Value
encodeJobs_arr_rel_insert_input input____ =
    Encode.maybeObject
        [ ( "data", (encodeJobs_insert_input |> Encode.list) input____.data |> Just ) ]


buildJobs_bool_exp :
    (Jobs_bool_expOptionalFields -> Jobs_bool_expOptionalFields)
    -> Jobs_bool_exp
buildJobs_bool_exp fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { and_ = Absent, not_ = Absent, or_ = Absent, about_brief = Absent, about_long = Absent, approved = Absent, cash_max = Absent, cash_min = Absent, company_industry = Absent, company_name = Absent, contact_email = Absent, contact_telegram = Absent, created_at = Absent, hashtags = Absent, id = Absent, legacy = Absent, level = Absent, location_city = Absent, location_country = Absent, location_office = Absent, perks = Absent, premium = Absent, remote = Absent, scope = Absent, stack = Absent, updated_at = Absent }
    in
    Jobs_bool_exp { and_ = optionals____.and_, not_ = optionals____.not_, or_ = optionals____.or_, about_brief = optionals____.about_brief, about_long = optionals____.about_long, approved = optionals____.approved, cash_max = optionals____.cash_max, cash_min = optionals____.cash_min, company_industry = optionals____.company_industry, company_name = optionals____.company_name, contact_email = optionals____.contact_email, contact_telegram = optionals____.contact_telegram, created_at = optionals____.created_at, hashtags = optionals____.hashtags, id = optionals____.id, legacy = optionals____.legacy, level = optionals____.level, location_city = optionals____.location_city, location_country = optionals____.location_country, location_office = optionals____.location_office, perks = optionals____.perks, premium = optionals____.premium, remote = optionals____.remote, scope = optionals____.scope, stack = optionals____.stack, updated_at = optionals____.updated_at }


type alias Jobs_bool_expOptionalFields =
    { and_ : OptionalArgument (List (Maybe Jobs_bool_exp))
    , not_ : OptionalArgument Jobs_bool_exp
    , or_ : OptionalArgument (List (Maybe Jobs_bool_exp))
    , about_brief : OptionalArgument String_comparison_exp
    , about_long : OptionalArgument String_comparison_exp
    , approved : OptionalArgument Boolean_comparison_exp
    , cash_max : OptionalArgument Int_comparison_exp
    , cash_min : OptionalArgument Int_comparison_exp
    , company_industry : OptionalArgument String_comparison_exp
    , company_name : OptionalArgument String_comparison_exp
    , contact_email : OptionalArgument String_comparison_exp
    , contact_telegram : OptionalArgument String_comparison_exp
    , created_at : OptionalArgument Timestamptz_comparison_exp
    , hashtags : OptionalArgument String_comparison_exp
    , id : OptionalArgument String_comparison_exp
    , legacy : OptionalArgument Int_comparison_exp
    , level : OptionalArgument String_comparison_exp
    , location_city : OptionalArgument String_comparison_exp
    , location_country : OptionalArgument String_comparison_exp
    , location_office : OptionalArgument String_comparison_exp
    , perks : OptionalArgument String_comparison_exp
    , premium : OptionalArgument Boolean_comparison_exp
    , remote : OptionalArgument Boolean_comparison_exp
    , scope : OptionalArgument String_comparison_exp
    , stack : OptionalArgument String_comparison_exp
    , updated_at : OptionalArgument Timestamptz_comparison_exp
    }


{-| Type alias for the `Jobs_bool_exp` attributes. Note that this type
needs to use the `Jobs_bool_exp` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias Jobs_bool_expRaw =
    { and_ : OptionalArgument (List (Maybe Jobs_bool_exp))
    , not_ : OptionalArgument Jobs_bool_exp
    , or_ : OptionalArgument (List (Maybe Jobs_bool_exp))
    , about_brief : OptionalArgument String_comparison_exp
    , about_long : OptionalArgument String_comparison_exp
    , approved : OptionalArgument Boolean_comparison_exp
    , cash_max : OptionalArgument Int_comparison_exp
    , cash_min : OptionalArgument Int_comparison_exp
    , company_industry : OptionalArgument String_comparison_exp
    , company_name : OptionalArgument String_comparison_exp
    , contact_email : OptionalArgument String_comparison_exp
    , contact_telegram : OptionalArgument String_comparison_exp
    , created_at : OptionalArgument Timestamptz_comparison_exp
    , hashtags : OptionalArgument String_comparison_exp
    , id : OptionalArgument String_comparison_exp
    , legacy : OptionalArgument Int_comparison_exp
    , level : OptionalArgument String_comparison_exp
    , location_city : OptionalArgument String_comparison_exp
    , location_country : OptionalArgument String_comparison_exp
    , location_office : OptionalArgument String_comparison_exp
    , perks : OptionalArgument String_comparison_exp
    , premium : OptionalArgument Boolean_comparison_exp
    , remote : OptionalArgument Boolean_comparison_exp
    , scope : OptionalArgument String_comparison_exp
    , stack : OptionalArgument String_comparison_exp
    , updated_at : OptionalArgument Timestamptz_comparison_exp
    }


{-| Type for the Jobs\_bool\_exp input object.
-}
type Jobs_bool_exp
    = Jobs_bool_exp Jobs_bool_expRaw


{-| Encode a Jobs\_bool\_exp into a value that can be used as an argument.
-}
encodeJobs_bool_exp : Jobs_bool_exp -> Value
encodeJobs_bool_exp (Jobs_bool_exp input____) =
    Encode.maybeObject
        [ ( "_and", (encodeJobs_bool_exp |> Encode.maybe |> Encode.list) |> Encode.optional input____.and_ ), ( "_not", encodeJobs_bool_exp |> Encode.optional input____.not_ ), ( "_or", (encodeJobs_bool_exp |> Encode.maybe |> Encode.list) |> Encode.optional input____.or_ ), ( "about_brief", encodeString_comparison_exp |> Encode.optional input____.about_brief ), ( "about_long", encodeString_comparison_exp |> Encode.optional input____.about_long ), ( "approved", encodeBoolean_comparison_exp |> Encode.optional input____.approved ), ( "cash_max", encodeInt_comparison_exp |> Encode.optional input____.cash_max ), ( "cash_min", encodeInt_comparison_exp |> Encode.optional input____.cash_min ), ( "company_industry", encodeString_comparison_exp |> Encode.optional input____.company_industry ), ( "company_name", encodeString_comparison_exp |> Encode.optional input____.company_name ), ( "contact_email", encodeString_comparison_exp |> Encode.optional input____.contact_email ), ( "contact_telegram", encodeString_comparison_exp |> Encode.optional input____.contact_telegram ), ( "created_at", encodeTimestamptz_comparison_exp |> Encode.optional input____.created_at ), ( "hashtags", encodeString_comparison_exp |> Encode.optional input____.hashtags ), ( "id", encodeString_comparison_exp |> Encode.optional input____.id ), ( "legacy", encodeInt_comparison_exp |> Encode.optional input____.legacy ), ( "level", encodeString_comparison_exp |> Encode.optional input____.level ), ( "location_city", encodeString_comparison_exp |> Encode.optional input____.location_city ), ( "location_country", encodeString_comparison_exp |> Encode.optional input____.location_country ), ( "location_office", encodeString_comparison_exp |> Encode.optional input____.location_office ), ( "perks", encodeString_comparison_exp |> Encode.optional input____.perks ), ( "premium", encodeBoolean_comparison_exp |> Encode.optional input____.premium ), ( "remote", encodeBoolean_comparison_exp |> Encode.optional input____.remote ), ( "scope", encodeString_comparison_exp |> Encode.optional input____.scope ), ( "stack", encodeString_comparison_exp |> Encode.optional input____.stack ), ( "updated_at", encodeTimestamptz_comparison_exp |> Encode.optional input____.updated_at ) ]


buildJobs_insert_input :
    (Jobs_insert_inputOptionalFields -> Jobs_insert_inputOptionalFields)
    -> Jobs_insert_input
buildJobs_insert_input fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { about_brief = Absent, about_long = Absent, cash_max = Absent, cash_min = Absent, company_industry = Absent, company_name = Absent, contact_email = Absent, contact_telegram = Absent, hashtags = Absent, legacy = Absent, level = Absent, location_city = Absent, location_country = Absent, location_office = Absent, perks = Absent, remote = Absent, scope = Absent, stack = Absent }
    in
    { about_brief = optionals____.about_brief, about_long = optionals____.about_long, cash_max = optionals____.cash_max, cash_min = optionals____.cash_min, company_industry = optionals____.company_industry, company_name = optionals____.company_name, contact_email = optionals____.contact_email, contact_telegram = optionals____.contact_telegram, hashtags = optionals____.hashtags, legacy = optionals____.legacy, level = optionals____.level, location_city = optionals____.location_city, location_country = optionals____.location_country, location_office = optionals____.location_office, perks = optionals____.perks, remote = optionals____.remote, scope = optionals____.scope, stack = optionals____.stack }


type alias Jobs_insert_inputOptionalFields =
    { about_brief : OptionalArgument String
    , about_long : OptionalArgument String
    , cash_max : OptionalArgument Int
    , cash_min : OptionalArgument Int
    , company_industry : OptionalArgument String
    , company_name : OptionalArgument String
    , contact_email : OptionalArgument String
    , contact_telegram : OptionalArgument String
    , hashtags : OptionalArgument String
    , legacy : OptionalArgument Int
    , level : OptionalArgument String
    , location_city : OptionalArgument String
    , location_country : OptionalArgument String
    , location_office : OptionalArgument String
    , perks : OptionalArgument String
    , remote : OptionalArgument Bool
    , scope : OptionalArgument String
    , stack : OptionalArgument String
    }


{-| Type for the Jobs\_insert\_input input object.
-}
type alias Jobs_insert_input =
    { about_brief : OptionalArgument String
    , about_long : OptionalArgument String
    , cash_max : OptionalArgument Int
    , cash_min : OptionalArgument Int
    , company_industry : OptionalArgument String
    , company_name : OptionalArgument String
    , contact_email : OptionalArgument String
    , contact_telegram : OptionalArgument String
    , hashtags : OptionalArgument String
    , legacy : OptionalArgument Int
    , level : OptionalArgument String
    , location_city : OptionalArgument String
    , location_country : OptionalArgument String
    , location_office : OptionalArgument String
    , perks : OptionalArgument String
    , remote : OptionalArgument Bool
    , scope : OptionalArgument String
    , stack : OptionalArgument String
    }


{-| Encode a Jobs\_insert\_input into a value that can be used as an argument.
-}
encodeJobs_insert_input : Jobs_insert_input -> Value
encodeJobs_insert_input input____ =
    Encode.maybeObject
        [ ( "about_brief", Encode.string |> Encode.optional input____.about_brief ), ( "about_long", Encode.string |> Encode.optional input____.about_long ), ( "cash_max", Encode.int |> Encode.optional input____.cash_max ), ( "cash_min", Encode.int |> Encode.optional input____.cash_min ), ( "company_industry", Encode.string |> Encode.optional input____.company_industry ), ( "company_name", Encode.string |> Encode.optional input____.company_name ), ( "contact_email", Encode.string |> Encode.optional input____.contact_email ), ( "contact_telegram", Encode.string |> Encode.optional input____.contact_telegram ), ( "hashtags", Encode.string |> Encode.optional input____.hashtags ), ( "legacy", Encode.int |> Encode.optional input____.legacy ), ( "level", Encode.string |> Encode.optional input____.level ), ( "location_city", Encode.string |> Encode.optional input____.location_city ), ( "location_country", Encode.string |> Encode.optional input____.location_country ), ( "location_office", Encode.string |> Encode.optional input____.location_office ), ( "perks", Encode.string |> Encode.optional input____.perks ), ( "remote", Encode.bool |> Encode.optional input____.remote ), ( "scope", Encode.string |> Encode.optional input____.scope ), ( "stack", Encode.string |> Encode.optional input____.stack ) ]


buildJobs_obj_rel_insert_input :
    Jobs_obj_rel_insert_inputRequiredFields
    -> Jobs_obj_rel_insert_input
buildJobs_obj_rel_insert_input required____ =
    { data = required____.data }


type alias Jobs_obj_rel_insert_inputRequiredFields =
    { data : Jobs_insert_input }


{-| Type for the Jobs\_obj\_rel\_insert\_input input object.
-}
type alias Jobs_obj_rel_insert_input =
    { data : Jobs_insert_input }


{-| Encode a Jobs\_obj\_rel\_insert\_input into a value that can be used as an argument.
-}
encodeJobs_obj_rel_insert_input : Jobs_obj_rel_insert_input -> Value
encodeJobs_obj_rel_insert_input input____ =
    Encode.maybeObject
        [ ( "data", encodeJobs_insert_input input____.data |> Just ) ]


buildJobs_order_by :
    (Jobs_order_byOptionalFields -> Jobs_order_byOptionalFields)
    -> Jobs_order_by
buildJobs_order_by fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { about_brief = Absent, about_long = Absent, approved = Absent, cash_max = Absent, cash_min = Absent, company_industry = Absent, company_name = Absent, contact_email = Absent, contact_telegram = Absent, created_at = Absent, hashtags = Absent, id = Absent, legacy = Absent, level = Absent, location_city = Absent, location_country = Absent, location_office = Absent, perks = Absent, premium = Absent, remote = Absent, scope = Absent, stack = Absent, updated_at = Absent }
    in
    { about_brief = optionals____.about_brief, about_long = optionals____.about_long, approved = optionals____.approved, cash_max = optionals____.cash_max, cash_min = optionals____.cash_min, company_industry = optionals____.company_industry, company_name = optionals____.company_name, contact_email = optionals____.contact_email, contact_telegram = optionals____.contact_telegram, created_at = optionals____.created_at, hashtags = optionals____.hashtags, id = optionals____.id, legacy = optionals____.legacy, level = optionals____.level, location_city = optionals____.location_city, location_country = optionals____.location_country, location_office = optionals____.location_office, perks = optionals____.perks, premium = optionals____.premium, remote = optionals____.remote, scope = optionals____.scope, stack = optionals____.stack, updated_at = optionals____.updated_at }


type alias Jobs_order_byOptionalFields =
    { about_brief : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , about_long : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , approved : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , cash_max : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , cash_min : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , company_industry : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , company_name : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , contact_email : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , contact_telegram : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , created_at : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , hashtags : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , id : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , legacy : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , level : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , location_city : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , location_country : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , location_office : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , perks : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , premium : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , remote : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , scope : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , stack : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , updated_at : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    }


{-| Type for the Jobs\_order\_by input object.
-}
type alias Jobs_order_by =
    { about_brief : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , about_long : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , approved : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , cash_max : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , cash_min : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , company_industry : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , company_name : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , contact_email : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , contact_telegram : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , created_at : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , hashtags : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , id : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , legacy : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , level : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , location_city : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , location_country : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , location_office : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , perks : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , premium : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , remote : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , scope : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , stack : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , updated_at : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    }


{-| Encode a Jobs\_order\_by into a value that can be used as an argument.
-}
encodeJobs_order_by : Jobs_order_by -> Value
encodeJobs_order_by input____ =
    Encode.maybeObject
        [ ( "about_brief", Encode.enum ProfunctorIo.Enum.Order_by.toString |> Encode.optional input____.about_brief ), ( "about_long", Encode.enum ProfunctorIo.Enum.Order_by.toString |> Encode.optional input____.about_long ), ( "approved", Encode.enum ProfunctorIo.Enum.Order_by.toString |> Encode.optional input____.approved ), ( "cash_max", Encode.enum ProfunctorIo.Enum.Order_by.toString |> Encode.optional input____.cash_max ), ( "cash_min", Encode.enum ProfunctorIo.Enum.Order_by.toString |> Encode.optional input____.cash_min ), ( "company_industry", Encode.enum ProfunctorIo.Enum.Order_by.toString |> Encode.optional input____.company_industry ), ( "company_name", Encode.enum ProfunctorIo.Enum.Order_by.toString |> Encode.optional input____.company_name ), ( "contact_email", Encode.enum ProfunctorIo.Enum.Order_by.toString |> Encode.optional input____.contact_email ), ( "contact_telegram", Encode.enum ProfunctorIo.Enum.Order_by.toString |> Encode.optional input____.contact_telegram ), ( "created_at", Encode.enum ProfunctorIo.Enum.Order_by.toString |> Encode.optional input____.created_at ), ( "hashtags", Encode.enum ProfunctorIo.Enum.Order_by.toString |> Encode.optional input____.hashtags ), ( "id", Encode.enum ProfunctorIo.Enum.Order_by.toString |> Encode.optional input____.id ), ( "legacy", Encode.enum ProfunctorIo.Enum.Order_by.toString |> Encode.optional input____.legacy ), ( "level", Encode.enum ProfunctorIo.Enum.Order_by.toString |> Encode.optional input____.level ), ( "location_city", Encode.enum ProfunctorIo.Enum.Order_by.toString |> Encode.optional input____.location_city ), ( "location_country", Encode.enum ProfunctorIo.Enum.Order_by.toString |> Encode.optional input____.location_country ), ( "location_office", Encode.enum ProfunctorIo.Enum.Order_by.toString |> Encode.optional input____.location_office ), ( "perks", Encode.enum ProfunctorIo.Enum.Order_by.toString |> Encode.optional input____.perks ), ( "premium", Encode.enum ProfunctorIo.Enum.Order_by.toString |> Encode.optional input____.premium ), ( "remote", Encode.enum ProfunctorIo.Enum.Order_by.toString |> Encode.optional input____.remote ), ( "scope", Encode.enum ProfunctorIo.Enum.Order_by.toString |> Encode.optional input____.scope ), ( "stack", Encode.enum ProfunctorIo.Enum.Order_by.toString |> Encode.optional input____.stack ), ( "updated_at", Encode.enum ProfunctorIo.Enum.Order_by.toString |> Encode.optional input____.updated_at ) ]


buildString_comparison_exp :
    (String_comparison_expOptionalFields -> String_comparison_expOptionalFields)
    -> String_comparison_exp
buildString_comparison_exp fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { eq_ = Absent, gt_ = Absent, gte_ = Absent, ilike_ = Absent, in_ = Absent, is_null_ = Absent, like_ = Absent, lt_ = Absent, lte_ = Absent, neq_ = Absent, nilike_ = Absent, nin_ = Absent, nlike_ = Absent, nsimilar_ = Absent, similar_ = Absent }
    in
    { eq_ = optionals____.eq_, gt_ = optionals____.gt_, gte_ = optionals____.gte_, ilike_ = optionals____.ilike_, in_ = optionals____.in_, is_null_ = optionals____.is_null_, like_ = optionals____.like_, lt_ = optionals____.lt_, lte_ = optionals____.lte_, neq_ = optionals____.neq_, nilike_ = optionals____.nilike_, nin_ = optionals____.nin_, nlike_ = optionals____.nlike_, nsimilar_ = optionals____.nsimilar_, similar_ = optionals____.similar_ }


type alias String_comparison_expOptionalFields =
    { eq_ : OptionalArgument String
    , gt_ : OptionalArgument String
    , gte_ : OptionalArgument String
    , ilike_ : OptionalArgument String
    , in_ : OptionalArgument (List String)
    , is_null_ : OptionalArgument Bool
    , like_ : OptionalArgument String
    , lt_ : OptionalArgument String
    , lte_ : OptionalArgument String
    , neq_ : OptionalArgument String
    , nilike_ : OptionalArgument String
    , nin_ : OptionalArgument (List String)
    , nlike_ : OptionalArgument String
    , nsimilar_ : OptionalArgument String
    , similar_ : OptionalArgument String
    }


{-| Type for the String\_comparison\_exp input object.
-}
type alias String_comparison_exp =
    { eq_ : OptionalArgument String
    , gt_ : OptionalArgument String
    , gte_ : OptionalArgument String
    , ilike_ : OptionalArgument String
    , in_ : OptionalArgument (List String)
    , is_null_ : OptionalArgument Bool
    , like_ : OptionalArgument String
    , lt_ : OptionalArgument String
    , lte_ : OptionalArgument String
    , neq_ : OptionalArgument String
    , nilike_ : OptionalArgument String
    , nin_ : OptionalArgument (List String)
    , nlike_ : OptionalArgument String
    , nsimilar_ : OptionalArgument String
    , similar_ : OptionalArgument String
    }


{-| Encode a String\_comparison\_exp into a value that can be used as an argument.
-}
encodeString_comparison_exp : String_comparison_exp -> Value
encodeString_comparison_exp input____ =
    Encode.maybeObject
        [ ( "_eq", Encode.string |> Encode.optional input____.eq_ ), ( "_gt", Encode.string |> Encode.optional input____.gt_ ), ( "_gte", Encode.string |> Encode.optional input____.gte_ ), ( "_ilike", Encode.string |> Encode.optional input____.ilike_ ), ( "_in", (Encode.string |> Encode.list) |> Encode.optional input____.in_ ), ( "_is_null", Encode.bool |> Encode.optional input____.is_null_ ), ( "_like", Encode.string |> Encode.optional input____.like_ ), ( "_lt", Encode.string |> Encode.optional input____.lt_ ), ( "_lte", Encode.string |> Encode.optional input____.lte_ ), ( "_neq", Encode.string |> Encode.optional input____.neq_ ), ( "_nilike", Encode.string |> Encode.optional input____.nilike_ ), ( "_nin", (Encode.string |> Encode.list) |> Encode.optional input____.nin_ ), ( "_nlike", Encode.string |> Encode.optional input____.nlike_ ), ( "_nsimilar", Encode.string |> Encode.optional input____.nsimilar_ ), ( "_similar", Encode.string |> Encode.optional input____.similar_ ) ]


buildSubmits_by_users_bool_exp :
    (Submits_by_users_bool_expOptionalFields -> Submits_by_users_bool_expOptionalFields)
    -> Submits_by_users_bool_exp
buildSubmits_by_users_bool_exp fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { and_ = Absent, not_ = Absent, or_ = Absent, count = Absent, submitted_by_username = Absent }
    in
    Submits_by_users_bool_exp { and_ = optionals____.and_, not_ = optionals____.not_, or_ = optionals____.or_, count = optionals____.count, submitted_by_username = optionals____.submitted_by_username }


type alias Submits_by_users_bool_expOptionalFields =
    { and_ : OptionalArgument (List (Maybe Submits_by_users_bool_exp))
    , not_ : OptionalArgument Submits_by_users_bool_exp
    , or_ : OptionalArgument (List (Maybe Submits_by_users_bool_exp))
    , count : OptionalArgument Bigint_comparison_exp
    , submitted_by_username : OptionalArgument String_comparison_exp
    }


{-| Type alias for the `Submits_by_users_bool_exp` attributes. Note that this type
needs to use the `Submits_by_users_bool_exp` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias Submits_by_users_bool_expRaw =
    { and_ : OptionalArgument (List (Maybe Submits_by_users_bool_exp))
    , not_ : OptionalArgument Submits_by_users_bool_exp
    , or_ : OptionalArgument (List (Maybe Submits_by_users_bool_exp))
    , count : OptionalArgument Bigint_comparison_exp
    , submitted_by_username : OptionalArgument String_comparison_exp
    }


{-| Type for the Submits\_by\_users\_bool\_exp input object.
-}
type Submits_by_users_bool_exp
    = Submits_by_users_bool_exp Submits_by_users_bool_expRaw


{-| Encode a Submits\_by\_users\_bool\_exp into a value that can be used as an argument.
-}
encodeSubmits_by_users_bool_exp : Submits_by_users_bool_exp -> Value
encodeSubmits_by_users_bool_exp (Submits_by_users_bool_exp input____) =
    Encode.maybeObject
        [ ( "_and", (encodeSubmits_by_users_bool_exp |> Encode.maybe |> Encode.list) |> Encode.optional input____.and_ ), ( "_not", encodeSubmits_by_users_bool_exp |> Encode.optional input____.not_ ), ( "_or", (encodeSubmits_by_users_bool_exp |> Encode.maybe |> Encode.list) |> Encode.optional input____.or_ ), ( "count", encodeBigint_comparison_exp |> Encode.optional input____.count ), ( "submitted_by_username", encodeString_comparison_exp |> Encode.optional input____.submitted_by_username ) ]


buildSubmits_by_users_order_by :
    (Submits_by_users_order_byOptionalFields -> Submits_by_users_order_byOptionalFields)
    -> Submits_by_users_order_by
buildSubmits_by_users_order_by fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { count = Absent, submitted_by_username = Absent }
    in
    { count = optionals____.count, submitted_by_username = optionals____.submitted_by_username }


type alias Submits_by_users_order_byOptionalFields =
    { count : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , submitted_by_username : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    }


{-| Type for the Submits\_by\_users\_order\_by input object.
-}
type alias Submits_by_users_order_by =
    { count : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , submitted_by_username : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    }


{-| Encode a Submits\_by\_users\_order\_by into a value that can be used as an argument.
-}
encodeSubmits_by_users_order_by : Submits_by_users_order_by -> Value
encodeSubmits_by_users_order_by input____ =
    Encode.maybeObject
        [ ( "count", Encode.enum ProfunctorIo.Enum.Order_by.toString |> Encode.optional input____.count ), ( "submitted_by_username", Encode.enum ProfunctorIo.Enum.Order_by.toString |> Encode.optional input____.submitted_by_username ) ]


buildTGAuthRequestInput :
    TGAuthRequestInputRequiredFields
    -> (TGAuthRequestInputOptionalFields -> TGAuthRequestInputOptionalFields)
    -> TGAuthRequestInput
buildTGAuthRequestInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { first_name = Absent, hash = Absent, last_name = Absent, photo_url = Absent, username = Absent }
    in
    { auth_date = required____.auth_date, first_name = optionals____.first_name, hash = optionals____.hash, id = required____.id, last_name = optionals____.last_name, photo_url = optionals____.photo_url, username = optionals____.username }


type alias TGAuthRequestInputRequiredFields =
    { auth_date : Int
    , id : Int
    }


type alias TGAuthRequestInputOptionalFields =
    { first_name : OptionalArgument String
    , hash : OptionalArgument String
    , last_name : OptionalArgument String
    , photo_url : OptionalArgument String
    , username : OptionalArgument String
    }


{-| Type for the TGAuthRequestInput input object.
-}
type alias TGAuthRequestInput =
    { auth_date : Int
    , first_name : OptionalArgument String
    , hash : OptionalArgument String
    , id : Int
    , last_name : OptionalArgument String
    , photo_url : OptionalArgument String
    , username : OptionalArgument String
    }


{-| Encode a TGAuthRequestInput into a value that can be used as an argument.
-}
encodeTGAuthRequestInput : TGAuthRequestInput -> Value
encodeTGAuthRequestInput input____ =
    Encode.maybeObject
        [ ( "auth_date", Encode.int input____.auth_date |> Just ), ( "first_name", Encode.string |> Encode.optional input____.first_name ), ( "hash", Encode.string |> Encode.optional input____.hash ), ( "id", Encode.int input____.id |> Just ), ( "last_name", Encode.string |> Encode.optional input____.last_name ), ( "photo_url", Encode.string |> Encode.optional input____.photo_url ), ( "username", Encode.string |> Encode.optional input____.username ) ]


buildTGAuthRequestSessionInput :
    TGAuthRequestSessionInputRequiredFields
    -> (TGAuthRequestSessionInputOptionalFields -> TGAuthRequestSessionInputOptionalFields)
    -> TGAuthRequestSessionInput
buildTGAuthRequestSessionInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { ip_address = Absent, user_agent = Absent }
    in
    { expires_at = required____.expires_at, id = required____.id, ip_address = optionals____.ip_address, refresh_token = required____.refresh_token, user_agent = optionals____.user_agent, user_id = required____.user_id }


type alias TGAuthRequestSessionInputRequiredFields =
    { expires_at : String
    , id : ProfunctorIo.ScalarCodecs.Id
    , refresh_token : String
    , user_id : ProfunctorIo.ScalarCodecs.Id
    }


type alias TGAuthRequestSessionInputOptionalFields =
    { ip_address : OptionalArgument String
    , user_agent : OptionalArgument String
    }


{-| Type for the TGAuthRequestSessionInput input object.
-}
type alias TGAuthRequestSessionInput =
    { expires_at : String
    , id : ProfunctorIo.ScalarCodecs.Id
    , ip_address : OptionalArgument String
    , refresh_token : String
    , user_agent : OptionalArgument String
    , user_id : ProfunctorIo.ScalarCodecs.Id
    }


{-| Encode a TGAuthRequestSessionInput into a value that can be used as an argument.
-}
encodeTGAuthRequestSessionInput : TGAuthRequestSessionInput -> Value
encodeTGAuthRequestSessionInput input____ =
    Encode.maybeObject
        [ ( "expires_at", Encode.string input____.expires_at |> Just ), ( "id", (ProfunctorIo.ScalarCodecs.codecs |> ProfunctorIo.Scalar.unwrapEncoder .codecId) input____.id |> Just ), ( "ip_address", Encode.string |> Encode.optional input____.ip_address ), ( "refresh_token", Encode.string input____.refresh_token |> Just ), ( "user_agent", Encode.string |> Encode.optional input____.user_agent ), ( "user_id", (ProfunctorIo.ScalarCodecs.codecs |> ProfunctorIo.Scalar.unwrapEncoder .codecId) input____.user_id |> Just ) ]


buildTimestamptz_comparison_exp :
    (Timestamptz_comparison_expOptionalFields -> Timestamptz_comparison_expOptionalFields)
    -> Timestamptz_comparison_exp
buildTimestamptz_comparison_exp fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { eq_ = Absent, gt_ = Absent, gte_ = Absent, in_ = Absent, is_null_ = Absent, lt_ = Absent, lte_ = Absent, neq_ = Absent, nin_ = Absent }
    in
    { eq_ = optionals____.eq_, gt_ = optionals____.gt_, gte_ = optionals____.gte_, in_ = optionals____.in_, is_null_ = optionals____.is_null_, lt_ = optionals____.lt_, lte_ = optionals____.lte_, neq_ = optionals____.neq_, nin_ = optionals____.nin_ }


type alias Timestamptz_comparison_expOptionalFields =
    { eq_ : OptionalArgument ProfunctorIo.ScalarCodecs.Timestamptz
    , gt_ : OptionalArgument ProfunctorIo.ScalarCodecs.Timestamptz
    , gte_ : OptionalArgument ProfunctorIo.ScalarCodecs.Timestamptz
    , in_ : OptionalArgument (List ProfunctorIo.ScalarCodecs.Timestamptz)
    , is_null_ : OptionalArgument Bool
    , lt_ : OptionalArgument ProfunctorIo.ScalarCodecs.Timestamptz
    , lte_ : OptionalArgument ProfunctorIo.ScalarCodecs.Timestamptz
    , neq_ : OptionalArgument ProfunctorIo.ScalarCodecs.Timestamptz
    , nin_ : OptionalArgument (List ProfunctorIo.ScalarCodecs.Timestamptz)
    }


{-| Type for the Timestamptz\_comparison\_exp input object.
-}
type alias Timestamptz_comparison_exp =
    { eq_ : OptionalArgument ProfunctorIo.ScalarCodecs.Timestamptz
    , gt_ : OptionalArgument ProfunctorIo.ScalarCodecs.Timestamptz
    , gte_ : OptionalArgument ProfunctorIo.ScalarCodecs.Timestamptz
    , in_ : OptionalArgument (List ProfunctorIo.ScalarCodecs.Timestamptz)
    , is_null_ : OptionalArgument Bool
    , lt_ : OptionalArgument ProfunctorIo.ScalarCodecs.Timestamptz
    , lte_ : OptionalArgument ProfunctorIo.ScalarCodecs.Timestamptz
    , neq_ : OptionalArgument ProfunctorIo.ScalarCodecs.Timestamptz
    , nin_ : OptionalArgument (List ProfunctorIo.ScalarCodecs.Timestamptz)
    }


{-| Encode a Timestamptz\_comparison\_exp into a value that can be used as an argument.
-}
encodeTimestamptz_comparison_exp : Timestamptz_comparison_exp -> Value
encodeTimestamptz_comparison_exp input____ =
    Encode.maybeObject
        [ ( "_eq", (ProfunctorIo.ScalarCodecs.codecs |> ProfunctorIo.Scalar.unwrapEncoder .codecTimestamptz) |> Encode.optional input____.eq_ ), ( "_gt", (ProfunctorIo.ScalarCodecs.codecs |> ProfunctorIo.Scalar.unwrapEncoder .codecTimestamptz) |> Encode.optional input____.gt_ ), ( "_gte", (ProfunctorIo.ScalarCodecs.codecs |> ProfunctorIo.Scalar.unwrapEncoder .codecTimestamptz) |> Encode.optional input____.gte_ ), ( "_in", ((ProfunctorIo.ScalarCodecs.codecs |> ProfunctorIo.Scalar.unwrapEncoder .codecTimestamptz) |> Encode.list) |> Encode.optional input____.in_ ), ( "_is_null", Encode.bool |> Encode.optional input____.is_null_ ), ( "_lt", (ProfunctorIo.ScalarCodecs.codecs |> ProfunctorIo.Scalar.unwrapEncoder .codecTimestamptz) |> Encode.optional input____.lt_ ), ( "_lte", (ProfunctorIo.ScalarCodecs.codecs |> ProfunctorIo.Scalar.unwrapEncoder .codecTimestamptz) |> Encode.optional input____.lte_ ), ( "_neq", (ProfunctorIo.ScalarCodecs.codecs |> ProfunctorIo.Scalar.unwrapEncoder .codecTimestamptz) |> Encode.optional input____.neq_ ), ( "_nin", ((ProfunctorIo.ScalarCodecs.codecs |> ProfunctorIo.Scalar.unwrapEncoder .codecTimestamptz) |> Encode.list) |> Encode.optional input____.nin_ ) ]


buildUpvotes_by_submitters_bool_exp :
    (Upvotes_by_submitters_bool_expOptionalFields -> Upvotes_by_submitters_bool_expOptionalFields)
    -> Upvotes_by_submitters_bool_exp
buildUpvotes_by_submitters_bool_exp fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { and_ = Absent, not_ = Absent, or_ = Absent, count = Absent, submitted_by_username = Absent }
    in
    Upvotes_by_submitters_bool_exp { and_ = optionals____.and_, not_ = optionals____.not_, or_ = optionals____.or_, count = optionals____.count, submitted_by_username = optionals____.submitted_by_username }


type alias Upvotes_by_submitters_bool_expOptionalFields =
    { and_ : OptionalArgument (List (Maybe Upvotes_by_submitters_bool_exp))
    , not_ : OptionalArgument Upvotes_by_submitters_bool_exp
    , or_ : OptionalArgument (List (Maybe Upvotes_by_submitters_bool_exp))
    , count : OptionalArgument Bigint_comparison_exp
    , submitted_by_username : OptionalArgument String_comparison_exp
    }


{-| Type alias for the `Upvotes_by_submitters_bool_exp` attributes. Note that this type
needs to use the `Upvotes_by_submitters_bool_exp` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias Upvotes_by_submitters_bool_expRaw =
    { and_ : OptionalArgument (List (Maybe Upvotes_by_submitters_bool_exp))
    , not_ : OptionalArgument Upvotes_by_submitters_bool_exp
    , or_ : OptionalArgument (List (Maybe Upvotes_by_submitters_bool_exp))
    , count : OptionalArgument Bigint_comparison_exp
    , submitted_by_username : OptionalArgument String_comparison_exp
    }


{-| Type for the Upvotes\_by\_submitters\_bool\_exp input object.
-}
type Upvotes_by_submitters_bool_exp
    = Upvotes_by_submitters_bool_exp Upvotes_by_submitters_bool_expRaw


{-| Encode a Upvotes\_by\_submitters\_bool\_exp into a value that can be used as an argument.
-}
encodeUpvotes_by_submitters_bool_exp : Upvotes_by_submitters_bool_exp -> Value
encodeUpvotes_by_submitters_bool_exp (Upvotes_by_submitters_bool_exp input____) =
    Encode.maybeObject
        [ ( "_and", (encodeUpvotes_by_submitters_bool_exp |> Encode.maybe |> Encode.list) |> Encode.optional input____.and_ ), ( "_not", encodeUpvotes_by_submitters_bool_exp |> Encode.optional input____.not_ ), ( "_or", (encodeUpvotes_by_submitters_bool_exp |> Encode.maybe |> Encode.list) |> Encode.optional input____.or_ ), ( "count", encodeBigint_comparison_exp |> Encode.optional input____.count ), ( "submitted_by_username", encodeString_comparison_exp |> Encode.optional input____.submitted_by_username ) ]


buildUpvotes_by_submitters_order_by :
    (Upvotes_by_submitters_order_byOptionalFields -> Upvotes_by_submitters_order_byOptionalFields)
    -> Upvotes_by_submitters_order_by
buildUpvotes_by_submitters_order_by fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { count = Absent, submitted_by_username = Absent }
    in
    { count = optionals____.count, submitted_by_username = optionals____.submitted_by_username }


type alias Upvotes_by_submitters_order_byOptionalFields =
    { count : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , submitted_by_username : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    }


{-| Type for the Upvotes\_by\_submitters\_order\_by input object.
-}
type alias Upvotes_by_submitters_order_by =
    { count : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    , submitted_by_username : OptionalArgument ProfunctorIo.Enum.Order_by.Order_by
    }


{-| Encode a Upvotes\_by\_submitters\_order\_by into a value that can be used as an argument.
-}
encodeUpvotes_by_submitters_order_by : Upvotes_by_submitters_order_by -> Value
encodeUpvotes_by_submitters_order_by input____ =
    Encode.maybeObject
        [ ( "count", Encode.enum ProfunctorIo.Enum.Order_by.toString |> Encode.optional input____.count ), ( "submitted_by_username", Encode.enum ProfunctorIo.Enum.Order_by.toString |> Encode.optional input____.submitted_by_username ) ]


buildWaitlist_resume_arr_rel_insert_input :
    Waitlist_resume_arr_rel_insert_inputRequiredFields
    -> Waitlist_resume_arr_rel_insert_input
buildWaitlist_resume_arr_rel_insert_input required____ =
    { data = required____.data }


type alias Waitlist_resume_arr_rel_insert_inputRequiredFields =
    { data : List Waitlist_resume_insert_input }


{-| Type for the Waitlist\_resume\_arr\_rel\_insert\_input input object.
-}
type alias Waitlist_resume_arr_rel_insert_input =
    { data : List Waitlist_resume_insert_input }


{-| Encode a Waitlist\_resume\_arr\_rel\_insert\_input into a value that can be used as an argument.
-}
encodeWaitlist_resume_arr_rel_insert_input : Waitlist_resume_arr_rel_insert_input -> Value
encodeWaitlist_resume_arr_rel_insert_input input____ =
    Encode.maybeObject
        [ ( "data", (encodeWaitlist_resume_insert_input |> Encode.list) input____.data |> Just ) ]


buildWaitlist_resume_insert_input :
    (Waitlist_resume_insert_inputOptionalFields -> Waitlist_resume_insert_inputOptionalFields)
    -> Waitlist_resume_insert_input
buildWaitlist_resume_insert_input fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { email = Absent, stack = Absent }
    in
    { email = optionals____.email, stack = optionals____.stack }


type alias Waitlist_resume_insert_inputOptionalFields =
    { email : OptionalArgument String
    , stack : OptionalArgument String
    }


{-| Type for the Waitlist\_resume\_insert\_input input object.
-}
type alias Waitlist_resume_insert_input =
    { email : OptionalArgument String
    , stack : OptionalArgument String
    }


{-| Encode a Waitlist\_resume\_insert\_input into a value that can be used as an argument.
-}
encodeWaitlist_resume_insert_input : Waitlist_resume_insert_input -> Value
encodeWaitlist_resume_insert_input input____ =
    Encode.maybeObject
        [ ( "email", Encode.string |> Encode.optional input____.email ), ( "stack", Encode.string |> Encode.optional input____.stack ) ]


buildWaitlist_resume_obj_rel_insert_input :
    Waitlist_resume_obj_rel_insert_inputRequiredFields
    -> Waitlist_resume_obj_rel_insert_input
buildWaitlist_resume_obj_rel_insert_input required____ =
    { data = required____.data }


type alias Waitlist_resume_obj_rel_insert_inputRequiredFields =
    { data : Waitlist_resume_insert_input }


{-| Type for the Waitlist\_resume\_obj\_rel\_insert\_input input object.
-}
type alias Waitlist_resume_obj_rel_insert_input =
    { data : Waitlist_resume_insert_input }


{-| Encode a Waitlist\_resume\_obj\_rel\_insert\_input into a value that can be used as an argument.
-}
encodeWaitlist_resume_obj_rel_insert_input : Waitlist_resume_obj_rel_insert_input -> Value
encodeWaitlist_resume_obj_rel_insert_input input____ =
    Encode.maybeObject
        [ ( "data", encodeWaitlist_resume_insert_input input____.data |> Just ) ]
