-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module ProfunctorIo.Subscription exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)
import ProfunctorIo.Enum.Downvotes_by_submitters_select_column
import ProfunctorIo.Enum.Jobs_select_column
import ProfunctorIo.Enum.Submits_by_users_select_column
import ProfunctorIo.Enum.Upvotes_by_submitters_select_column
import ProfunctorIo.InputObject
import ProfunctorIo.Interface
import ProfunctorIo.Object
import ProfunctorIo.Scalar
import ProfunctorIo.ScalarCodecs
import ProfunctorIo.Union


type alias DownvotesBySubmittersOptionalArguments =
    { distinct_on : OptionalArgument (List ProfunctorIo.Enum.Downvotes_by_submitters_select_column.Downvotes_by_submitters_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List ProfunctorIo.InputObject.Downvotes_by_submitters_order_by)
    , where_ : OptionalArgument ProfunctorIo.InputObject.Downvotes_by_submitters_bool_exp
    }


{-| fetch data from the table: "downvotes\_by\_submitters"

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
downvotes_by_submitters :
    (DownvotesBySubmittersOptionalArguments -> DownvotesBySubmittersOptionalArguments)
    -> SelectionSet decodesTo ProfunctorIo.Object.Downvotes_by_submitters
    -> SelectionSet (List decodesTo) RootSubscription
downvotes_by_submitters fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum ProfunctorIo.Enum.Downvotes_by_submitters_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (ProfunctorIo.InputObject.encodeDownvotes_by_submitters_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ ProfunctorIo.InputObject.encodeDownvotes_by_submitters_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "downvotes_by_submitters" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias JobsOptionalArguments =
    { distinct_on : OptionalArgument (List ProfunctorIo.Enum.Jobs_select_column.Jobs_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List ProfunctorIo.InputObject.Jobs_order_by)
    , where_ : OptionalArgument ProfunctorIo.InputObject.Jobs_bool_exp
    }


{-| fetch data from the table: "jobs"

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
jobs :
    (JobsOptionalArguments -> JobsOptionalArguments)
    -> SelectionSet decodesTo ProfunctorIo.Object.Jobs
    -> SelectionSet (List decodesTo) RootSubscription
jobs fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum ProfunctorIo.Enum.Jobs_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (ProfunctorIo.InputObject.encodeJobs_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ ProfunctorIo.InputObject.encodeJobs_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "jobs" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias JobsByPkRequiredArguments =
    { id : String }


{-| fetch data from the table: "jobs" using primary key columns
-}
jobs_by_pk :
    JobsByPkRequiredArguments
    -> SelectionSet decodesTo ProfunctorIo.Object.Jobs
    -> SelectionSet (Maybe decodesTo) RootSubscription
jobs_by_pk requiredArgs____ object____ =
    Object.selectionForCompositeField "jobs_by_pk" [ Argument.required "id" requiredArgs____.id Encode.string ] object____ (Basics.identity >> Decode.nullable)


type alias SubmitsByUsersOptionalArguments =
    { distinct_on : OptionalArgument (List ProfunctorIo.Enum.Submits_by_users_select_column.Submits_by_users_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List ProfunctorIo.InputObject.Submits_by_users_order_by)
    , where_ : OptionalArgument ProfunctorIo.InputObject.Submits_by_users_bool_exp
    }


{-| fetch data from the table: "submits\_by\_users"

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
submits_by_users :
    (SubmitsByUsersOptionalArguments -> SubmitsByUsersOptionalArguments)
    -> SelectionSet decodesTo ProfunctorIo.Object.Submits_by_users
    -> SelectionSet (List decodesTo) RootSubscription
submits_by_users fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum ProfunctorIo.Enum.Submits_by_users_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (ProfunctorIo.InputObject.encodeSubmits_by_users_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ ProfunctorIo.InputObject.encodeSubmits_by_users_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "submits_by_users" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias UpvotesBySubmittersOptionalArguments =
    { distinct_on : OptionalArgument (List ProfunctorIo.Enum.Upvotes_by_submitters_select_column.Upvotes_by_submitters_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List ProfunctorIo.InputObject.Upvotes_by_submitters_order_by)
    , where_ : OptionalArgument ProfunctorIo.InputObject.Upvotes_by_submitters_bool_exp
    }


{-| fetch data from the table: "upvotes\_by\_submitters"

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
upvotes_by_submitters :
    (UpvotesBySubmittersOptionalArguments -> UpvotesBySubmittersOptionalArguments)
    -> SelectionSet decodesTo ProfunctorIo.Object.Upvotes_by_submitters
    -> SelectionSet (List decodesTo) RootSubscription
upvotes_by_submitters fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum ProfunctorIo.Enum.Upvotes_by_submitters_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (ProfunctorIo.InputObject.encodeUpvotes_by_submitters_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ ProfunctorIo.InputObject.encodeUpvotes_by_submitters_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "upvotes_by_submitters" optionalArgs____ object____ (Basics.identity >> Decode.list)
